{"version":3,"sources":["api.js","Filter.js","MovieList.js","serviceWorker.js","index.js","App.js"],"names":["getMovieList","fetch","then","response","json","Filter","_ref","filterKey","placeholder","value","onChange","react_default","a","createElement","className","type","event","MovieList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleFilters","key","target","setState","filters","objectSpread","defineProperty","filterMovies","_this$state","state","movies","activeFilterKeys","keys","filter","length","movie","every","toLowerCase","includes","title","description","director","producer","_this2","_this$state2","filteredMovies","src_Filter_0","map","_ref2","id","release_date","rt_score","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_MovieList_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.da45491b.chunk.js","sourcesContent":["const get = url => fetch(url).then(response => response.json());\n\nexport const getMovieList = () => get('https://ghibliapi.herokuapp.com/films');","import React from 'react';\nimport './Filter.css';\n\nconst Filter = ({ filterKey, placeholder, value, onChange }) =>\n  <input\n    className=\"filter\"\n    type=\"search\"\n    placeholder={placeholder}\n    value={value}\n    onChange={event => {\n      onChange(filterKey, event)\n    }}\n  />\n\n\nexport default Filter;","import React, { Component } from 'react';\nimport { getMovieList } from './api';\nimport './MovieList.css';\nimport Filter from './Filter';\n\nclass MovieList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movies: [],\n      filters: {\n        title: '',\n        description: '',\n        director: '',\n        producer: '',\n      }\n    };\n  }\n\n  componentDidMount() {\n    getMovieList().then(movies => {\n      this.setState({ movies })\n    })\n  }\n\n  handleFilters = (key, event) => {\n    const value = event.target.value;\n    this.setState(({ filters }) => ({ filters: { ...filters, [key]: value } }))\n  }\n\n  filterMovies = () => {\n    const { movies, filters } = this.state;\n    const activeFilterKeys = Object.keys(filters).filter(key => filters[key] !== '');\n    if (activeFilterKeys.length === 0) {\n      return movies;\n    }\n    return movies.filter((movie) =>\n      activeFilterKeys.every(key => movie[key].toLowerCase().includes(filters[key].toLowerCase()))\n    )\n  }\n\n  render() {\n    const { movies, filters } = this.state;\n    const filteredMovies = this.filterMovies(movies);\n    return (\n      <div className=\"wrapper\">\n        <h1>Ghibli movies</h1>\n        <table>\n          <thead>\n            <tr>\n              <th>Title</th>\n              <th>Description</th>\n              <th>Director</th>\n              <th>Producer</th>\n              <th>Release year</th>\n              <th>Score (Rotten Tomatoes)</th>\n            </tr>\n            <tr>\n              <th><Filter placeholder=\"Filter by title\" filterKey=\"title\" value={filters.title} onChange={this.handleFilters} /></th>\n              <th><Filter placeholder=\"Filter by description\" filterKey=\"description\" value={filters.description} onChange={this.handleFilters} /></th>\n              <th><Filter placeholder=\"Filter by director\" filterKey=\"director\" value={filters.director} onChange={this.handleFilters} /></th>\n              <th><Filter placeholder=\"Filter by producer\" filterKey=\"producer\" value={filters.producer} onChange={this.handleFilters} /></th>\n              <th /><th />\n            </tr>\n          </thead>\n          <tbody>\n            {filteredMovies.map(({ id, title, description, director, producer, release_date, rt_score }) => <tr key={id} >\n              <td>{title}</td>\n              <td>{description}</td>\n              <td>{director}</td>\n              <td>{producer}</td>\n              <td className=\"number\">{release_date}</td>\n              <td className=\"number\">{rt_score}</td>\n            </tr>)}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}\n\nexport default MovieList;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport MovieList from './MovieList';\n\nexport default () => <div><MovieList /></div>\n\n"],"sourceRoot":""}